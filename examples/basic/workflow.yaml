# This is a simple Serverless Workflow that will be
# translated into a Temporal workflow
document:
  dsl: 1.0.0
  namespace: ignored # Ignored by Temporal
  name: basic # Workflow name
  version: 0.0.1
  title: Basic Workflow
  summary: An example of how to use Serverless Workflow to define Temporal Workflows
# Optionally validate the input received
input:
  schema:
    format: json
    document:
      type: object
      required:
        - userId
      properties:
        userId:
          type: number
timeout:
  after:
    minutes: 1
do:
  - step1:
      set:
        # Set a variable from an envvar
        envvar: "{{ .TDSL_EXAMPLE_ENVVAR }}"
        "{{ uuidv4 }}": some value
        uuid: "{{ uuidv4 }}"
        object:
          hello: world
          uuid: "{{ uuidv4 }}"
        inputUserId: "{{ .input.userId }}"
        array:
          - "{{ uuidv4 }}"
          - hello: world
  - wait:
      wait:
        seconds: 5
  - getUser:
      call: http
      export:
        as: getUser
      with:
        method: get
        endpoint: https://jsonplaceholder.typicode.com/users/{{ .input.userId }}
  - raiseAlarm:
      # A fork is a series of child workflows running in parallel
      export:
        as: raiseAlarm
      fork:
        # If not competing, all tasks will run to the finish - this is the default behaviour
        compete: false
        branches:
          # A single step is passed in by the Serverless Workflow task
          - callNurse:
              call: http
              export:
                as: callNurse
              with:
                method: get
                endpoint: https://jsonplaceholder.typicode.com/users/{{ .input.userId }}
          # Multiple steps can be passed in by the Serverless Workflow do task
          - multiStep:
              do:
                - wait1:
                    wait:
                      seconds: 3
                - wait2:
                    wait:
                      seconds: 2
          # Another single step child workflow
          - callDoctor:
              call: http
              export:
                as: callDoctor
              with:
                method: get
                endpoint: https://jsonplaceholder.typicode.com/users/3
